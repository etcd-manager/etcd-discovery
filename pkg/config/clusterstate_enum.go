// Code generated by go-enum
// DO NOT EDIT!

package config

import (
	"fmt"
	"strings"
)

const (
	// ClusterStateNew is a ClusterState of type New
	ClusterStateNew ClusterState = iota
	// ClusterStateExisting is a ClusterState of type Existing
	ClusterStateExisting
)

const _ClusterStateName = "NewExisting"

var _ClusterStateMap = map[ClusterState]string{
	0: _ClusterStateName[0:3],
	1: _ClusterStateName[3:11],
}

func (i ClusterState) String() string {
	if str, ok := _ClusterStateMap[i]; ok {
		return str
	}
	return fmt.Sprintf("ClusterState(%d)", i)
}

var _ClusterStateValue = map[string]ClusterState{
	_ClusterStateName[0:3]:                   0,
	strings.ToLower(_ClusterStateName[0:3]):  0,
	_ClusterStateName[3:11]:                  1,
	strings.ToLower(_ClusterStateName[3:11]): 1,
}

// ParseClusterState attempts to convert a string to a ClusterState
func ParseClusterState(name string) (ClusterState, error) {
	if x, ok := _ClusterStateValue[name]; ok {
		return ClusterState(x), nil
	}
	return ClusterState(0), fmt.Errorf("%s is not a valid ClusterState", name)
}

// Set implements the Golang flag.Value interface func
func (x *ClusterState) Set(val string) error {
	v, err := ParseClusterState(val)
	*x = v
	return err
}

// Get implements the Golang flag.Getter interface func
func (x *ClusterState) Get() interface{} {
	return *x
}

// Type implements the github.com/spf13/pFlag Value interface
func (x *ClusterState) Type() string {
	return "ClusterState"
}
